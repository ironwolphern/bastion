name: Build and Push Docker Images

on:
  push:
    branches:
      - 'main'
      - '!develop'
    tags:
      - v?.?.?
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.set-dockerfiles.outputs.dockerfiles }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Dockerfiles
        id: set-dockerfiles
        run: |
          DOCKERFILES=$(find . -name "Dockerfile" | jq -R -s -c 'split("\n")[:-1]')
          echo "dockerfiles=$DOCKERFILES" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.prepare.outputs.dockerfiles) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image name
        run: |
          DOCKERFILE_PATH="${{ matrix.dockerfile }}"
          DIRECTORY=$(dirname "$DOCKERFILE_PATH")
          IMAGE_NAME="${{ github.repository }}-$(echo $DIRECTORY | sed 's/^\.\/distribution\///')"
          DOCKERFILE_NAME=$(basename "$DOCKERFILE_PATH")
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "DOCKERFILE_NAME=$DOCKERFILE_NAME" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=$(TZ=Europe/Madrid date)
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Create scan directory
        run: mkdir -p scan-results

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: "sarif"
          output: "scan-results/trivy-results${{ env.DOCKERFILE_NAME }}.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "scan-results/trivy-results${{ env.DOCKERFILE_NAME }}.sarif"
