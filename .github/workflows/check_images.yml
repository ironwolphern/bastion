name: Docker Images Validation

on:
  push:
    branches: [ "develop" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # Versions tools
  TERRAFORM_VERSION: 1.0.0
  OC_VERSION: 4.8.0

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      distributions: ${{ steps.set-distro.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Get changed files in the distribution folder
      - name: Get changed files
        id: changed-files-yaml
        uses: tj-actions/changed-files@v45.0.7
        with:
          files_yaml: |
            distro:
              - distribution/*/Dockerfile
            configs:
              - .env
              - requirements.txt
              - ssh_config
              - entrypoint.sh
              - ansible.cfg

      # Set distributions as a matrix
      - name: Set distributions
        id: set-distro
        run: |
          if [ "${{ steps.changed-files-yaml.outputs.distro_any_changed }}" == "true" ]; then
            echo "matrix=$(echo '["'$(echo ${{ steps.changed-files-yaml.outputs.distro_all_changed_files }} | \
            sed 's/ /","/g')'"]' | sed 's/\/Dockerfile//g')" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changed-files-yaml.outputs.configs_any_changed }}" == "true" ]; then
            for file in $(ls -d distribution/* 2> /dev/null); do
              DISTRIBUTIONS+="$file "
            done
            echo "matrix=$(echo '["'$(echo ${DISTRIBUTIONS[@]} | sed 's/ /","/g')'"]')" >> $GITHUB_OUTPUT
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
          fi

  validate:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.distributions != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ${{ fromJson(needs.detect-changes.outputs.distributions) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Get distribution name from the matrix and set it as an environment variable
      - name: Get distribution name
        id: distribution
        run: echo "name=$(basename ${{ matrix.distro }})" >> $GITHUB_OUTPUT

      # Install Hadolint
      - name: Install Hadolint
        run: |
          wget -q https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
          sudo chmod +x /usr/local/bin/hadolint

      - name: Run Hadolint
        run: hadolint ${{ matrix.distro }}/Dockerfile

  summary_validation:
    needs: validate
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check validation status
        run: |
          if [ "${{ needs.validate.result }}" = "success" ]; then
            echo "✅ All distribution validations passed successfully"
            exit 0
          elif [ "${{ needs.validate.result }}" = "skipped" ]; then
            echo "⚠️ No distribution validations were run"
            exit 0
          else
            echo "❌ Some distribution validations failed"
            exit 1
          fi

  build:
    needs: [detect-changes, validate]
    if: ${{ needs.validate.result == 'success' }} && ${{ needs.detect-changes.outputs.distributions != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        distro: ${{ fromJson(needs.detect-changes.outputs.distributions) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set arguments for the build
        id: set-args
        run: |
          echo "IMAGE_NAME=${{ github.repository }}-$(basename ${{ matrix.distro }})" >> $GITHUB_ENV
          echo "TERRAFORM_VERSION=$(cat .env | grep TERRAFORM_VERSION | cut -d'=' -f2)" >> $GITHUB_ENV
          echo "OC_VERSION=$(cat .env | grep OC_VERSION | cut -d'=' -f2)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.name=${{ env.IMAGE_NAME }}-test
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}-test
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.url="https://github.com/${{ github.repository }}"
            org.opencontainers.image.documentation="https://github.com/${{ github.repository }}"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"
            org.opencontainers.image.description="DevOps Tools Container"
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ github.ref_name}}
            org.opencontainers.image.created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.actor }}
            org.opencontainers.image.ref.name=${{ github.ref }}
          tags: |
            type=ref,event=branch
            type=sha,format=long

      - name: Build image for analysis
        uses: docker/build-push-action@v6.13.0
        with:
          context: ${{ github.workspace }}
          file: ${{ matrix.distro }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TERRAFORM_VERSION=${{ env.TERRAFORM_VERSION }}
            OC_VERSION=${{ env.OC_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary_build:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ All build validations passed successfully"
            exit 0
          elif [ "${{ needs.build.result }}" = "skipped" ]; then
            echo "⚠️ No build validations were run"
            exit 0
          else
            echo "❌ Some build validations failed"
            exit 1
          fi

  optimize:
    needs: [build, detect-changes]
    if: ${{ needs.build.result == 'success' }} && ${{ needs.detect-changes.outputs.distributions != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        distro: ${{ fromJson(needs.detect-changes.outputs.distributions) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set arguments for the image
        id: set-args
        run: |
          echo "IMAGE_NAME=${{ github.repository }}-$(basename ${{ matrix.distro }})" >> $GITHUB_ENV

      - name: Run Dive analysis
        uses: MaxymVlasov/dive-action@v1.4.0
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          config-file: ${{ github.workspace }}/.dive-ci.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

  summary_optimize:
    needs: optimize
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check optimize status
        run: |
          if [ "${{ needs.optimize.result }}" = "success" ]; then
            echo "✅ All optimize validations passed successfully"
            exit 0
          elif [ "${{ needs.optimize.result }}" = "skipped" ]; then
            echo "⚠️ No optimize validations were run"
            exit 0
          else
            echo "❌ Some optimize validations failed"
            exit 1
          fi

  security:
    needs: [build, detect-changes]
    if: ${{ needs.build.result == 'success' }} && ${{ needs.detect-changes.outputs.distributions != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        distro: ${{ fromJson(needs.detect-changes.outputs.distributions) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set arguments for the image
        id: set-args
        run: |
          echo "IMAGE_NAME=${{ github.repository }}-$(basename ${{ matrix.distro }})" >> $GITHUB_ENV

      - name: Run Dockle security check
        uses: goodwithtech/dockle-action@v0.4.15
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          format: 'list'
          exit-code: '1'
          exit-level: 'warn'

  summary_security:
    needs: security
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check security status
        run: |
          if [ "${{ needs.security.result }}" = "success" ]; then
            echo "✅ All security validations passed successfully"
            exit 0
          elif [ "${{ needs.security.result }}" = "skipped" ]; then
            echo "⚠️ No security validations were run"
            exit 0
          else
            echo "❌ Some security validations failed"
            exit 1
          fi
